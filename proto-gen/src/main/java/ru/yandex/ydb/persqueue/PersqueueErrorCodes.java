// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kikimr/public/api/protos/draft/persqueue_error_codes.proto

package ru.yandex.ydb.persqueue;

public final class PersqueueErrorCodes {
  private PersqueueErrorCodes() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code NPersQueue.NErrorCode.EErrorCode}
   */
  public enum EErrorCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <code>INITIALIZING = 1;</code>
     */
    INITIALIZING(1),
    /**
     * <code>OVERLOAD = 2;</code>
     */
    OVERLOAD(2),
    /**
     * <code>BAD_REQUEST = 3;</code>
     */
    BAD_REQUEST(3),
    /**
     * <code>WRONG_COOKIE = 4;</code>
     */
    WRONG_COOKIE(4),
    /**
     * <code>WRITE_ERROR_PARTITION_IS_FULL = 5;</code>
     */
    WRITE_ERROR_PARTITION_IS_FULL(5),
    /**
     * <code>WRITE_ERROR_DISK_IS_FULL = 15;</code>
     */
    WRITE_ERROR_DISK_IS_FULL(15),
    /**
     * <code>WRITE_ERROR_BAD_OFFSET = 19;</code>
     */
    WRITE_ERROR_BAD_OFFSET(19),
    /**
     * <code>CREATE_SESSION_ALREADY_LOCKED = 6;</code>
     */
    CREATE_SESSION_ALREADY_LOCKED(6),
    /**
     * <code>DELETE_SESSION_NO_SESSION = 7;</code>
     */
    DELETE_SESSION_NO_SESSION(7),
    /**
     * <code>READ_ERROR_IN_PROGRESS = 8;</code>
     */
    READ_ERROR_IN_PROGRESS(8),
    /**
     * <code>READ_ERROR_NO_SESSION = 9;</code>
     */
    READ_ERROR_NO_SESSION(9),
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>READ_TIMEOUT = 10;</code>
     */
    READ_TIMEOUT(10),
    /**
     * <code>READ_ERROR_TOO_SMALL_OFFSET = 11;</code>
     */
    READ_ERROR_TOO_SMALL_OFFSET(11),
    /**
     * <code>READ_ERROR_TOO_BIG_OFFSET = 12;</code>
     */
    READ_ERROR_TOO_BIG_OFFSET(12),
    /**
     * <code>SET_OFFSET_ERROR_COMMIT_TO_FUTURE = 13;</code>
     */
    SET_OFFSET_ERROR_COMMIT_TO_FUTURE(13),
    /**
     * <code>TABLET_IS_DROPPED = 14;</code>
     */
    TABLET_IS_DROPPED(14),
    /**
     * <code>READ_NOT_DONE = 16;</code>
     */
    READ_NOT_DONE(16),
    /**
     * <code>UNKNOWN_TOPIC = 17;</code>
     */
    UNKNOWN_TOPIC(17),
    /**
     * <code>ACCESS_DENIED = 18;</code>
     */
    ACCESS_DENIED(18),
    /**
     * <code>CLUSTER_DISABLED = 20;</code>
     */
    CLUSTER_DISABLED(20),
    /**
     * <code>WRONG_PARTITION_NUMBER = 21;</code>
     */
    WRONG_PARTITION_NUMBER(21),
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>CREATE_TIMEOUT = 22;</code>
     */
    CREATE_TIMEOUT(22),
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>IDLE_TIMEOUT = 23;</code>
     */
    IDLE_TIMEOUT(23),
    /**
     * <code>ERROR = 100;</code>
     */
    ERROR(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <code>INITIALIZING = 1;</code>
     */
    public static final int INITIALIZING_VALUE = 1;
    /**
     * <code>OVERLOAD = 2;</code>
     */
    public static final int OVERLOAD_VALUE = 2;
    /**
     * <code>BAD_REQUEST = 3;</code>
     */
    public static final int BAD_REQUEST_VALUE = 3;
    /**
     * <code>WRONG_COOKIE = 4;</code>
     */
    public static final int WRONG_COOKIE_VALUE = 4;
    /**
     * <code>WRITE_ERROR_PARTITION_IS_FULL = 5;</code>
     */
    public static final int WRITE_ERROR_PARTITION_IS_FULL_VALUE = 5;
    /**
     * <code>WRITE_ERROR_DISK_IS_FULL = 15;</code>
     */
    public static final int WRITE_ERROR_DISK_IS_FULL_VALUE = 15;
    /**
     * <code>WRITE_ERROR_BAD_OFFSET = 19;</code>
     */
    public static final int WRITE_ERROR_BAD_OFFSET_VALUE = 19;
    /**
     * <code>CREATE_SESSION_ALREADY_LOCKED = 6;</code>
     */
    public static final int CREATE_SESSION_ALREADY_LOCKED_VALUE = 6;
    /**
     * <code>DELETE_SESSION_NO_SESSION = 7;</code>
     */
    public static final int DELETE_SESSION_NO_SESSION_VALUE = 7;
    /**
     * <code>READ_ERROR_IN_PROGRESS = 8;</code>
     */
    public static final int READ_ERROR_IN_PROGRESS_VALUE = 8;
    /**
     * <code>READ_ERROR_NO_SESSION = 9;</code>
     */
    public static final int READ_ERROR_NO_SESSION_VALUE = 9;
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>READ_TIMEOUT = 10;</code>
     */
    public static final int READ_TIMEOUT_VALUE = 10;
    /**
     * <code>READ_ERROR_TOO_SMALL_OFFSET = 11;</code>
     */
    public static final int READ_ERROR_TOO_SMALL_OFFSET_VALUE = 11;
    /**
     * <code>READ_ERROR_TOO_BIG_OFFSET = 12;</code>
     */
    public static final int READ_ERROR_TOO_BIG_OFFSET_VALUE = 12;
    /**
     * <code>SET_OFFSET_ERROR_COMMIT_TO_FUTURE = 13;</code>
     */
    public static final int SET_OFFSET_ERROR_COMMIT_TO_FUTURE_VALUE = 13;
    /**
     * <code>TABLET_IS_DROPPED = 14;</code>
     */
    public static final int TABLET_IS_DROPPED_VALUE = 14;
    /**
     * <code>READ_NOT_DONE = 16;</code>
     */
    public static final int READ_NOT_DONE_VALUE = 16;
    /**
     * <code>UNKNOWN_TOPIC = 17;</code>
     */
    public static final int UNKNOWN_TOPIC_VALUE = 17;
    /**
     * <code>ACCESS_DENIED = 18;</code>
     */
    public static final int ACCESS_DENIED_VALUE = 18;
    /**
     * <code>CLUSTER_DISABLED = 20;</code>
     */
    public static final int CLUSTER_DISABLED_VALUE = 20;
    /**
     * <code>WRONG_PARTITION_NUMBER = 21;</code>
     */
    public static final int WRONG_PARTITION_NUMBER_VALUE = 21;
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>CREATE_TIMEOUT = 22;</code>
     */
    public static final int CREATE_TIMEOUT_VALUE = 22;
    /**
     * <pre>
     * TODO: move to pqlib codes
     * </pre>
     *
     * <code>IDLE_TIMEOUT = 23;</code>
     */
    public static final int IDLE_TIMEOUT_VALUE = 23;
    /**
     * <code>ERROR = 100;</code>
     */
    public static final int ERROR_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static EErrorCode forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return INITIALIZING;
        case 2: return OVERLOAD;
        case 3: return BAD_REQUEST;
        case 4: return WRONG_COOKIE;
        case 5: return WRITE_ERROR_PARTITION_IS_FULL;
        case 15: return WRITE_ERROR_DISK_IS_FULL;
        case 19: return WRITE_ERROR_BAD_OFFSET;
        case 6: return CREATE_SESSION_ALREADY_LOCKED;
        case 7: return DELETE_SESSION_NO_SESSION;
        case 8: return READ_ERROR_IN_PROGRESS;
        case 9: return READ_ERROR_NO_SESSION;
        case 10: return READ_TIMEOUT;
        case 11: return READ_ERROR_TOO_SMALL_OFFSET;
        case 12: return READ_ERROR_TOO_BIG_OFFSET;
        case 13: return SET_OFFSET_ERROR_COMMIT_TO_FUTURE;
        case 14: return TABLET_IS_DROPPED;
        case 16: return READ_NOT_DONE;
        case 17: return UNKNOWN_TOPIC;
        case 18: return ACCESS_DENIED;
        case 20: return CLUSTER_DISABLED;
        case 21: return WRONG_PARTITION_NUMBER;
        case 22: return CREATE_TIMEOUT;
        case 23: return IDLE_TIMEOUT;
        case 100: return ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EErrorCode>() {
            public EErrorCode findValueByNumber(int number) {
              return EErrorCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ru.yandex.ydb.persqueue.PersqueueErrorCodes.getDescriptor().getEnumTypes().get(0);
    }

    private static final EErrorCode[] VALUES = values();

    public static EErrorCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NPersQueue.NErrorCode.EErrorCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:kikimr/public/api/protos/draft/persque" +
      "ue_error_codes.proto\022\025NPersQueue.NErrorC" +
      "ode*\331\004\n\nEErrorCode\022\006\n\002OK\020\000\022\020\n\014INITIALIZI" +
      "NG\020\001\022\014\n\010OVERLOAD\020\002\022\017\n\013BAD_REQUEST\020\003\022\020\n\014W" +
      "RONG_COOKIE\020\004\022!\n\035WRITE_ERROR_PARTITION_I" +
      "S_FULL\020\005\022\034\n\030WRITE_ERROR_DISK_IS_FULL\020\017\022\032" +
      "\n\026WRITE_ERROR_BAD_OFFSET\020\023\022!\n\035CREATE_SES" +
      "SION_ALREADY_LOCKED\020\006\022\035\n\031DELETE_SESSION_" +
      "NO_SESSION\020\007\022\032\n\026READ_ERROR_IN_PROGRESS\020\010" +
      "\022\031\n\025READ_ERROR_NO_SESSION\020\t\022\020\n\014READ_TIME",
      "OUT\020\n\022\037\n\033READ_ERROR_TOO_SMALL_OFFSET\020\013\022\035" +
      "\n\031READ_ERROR_TOO_BIG_OFFSET\020\014\022%\n!SET_OFF" +
      "SET_ERROR_COMMIT_TO_FUTURE\020\r\022\025\n\021TABLET_I" +
      "S_DROPPED\020\016\022\021\n\rREAD_NOT_DONE\020\020\022\021\n\rUNKNOW" +
      "N_TOPIC\020\021\022\021\n\rACCESS_DENIED\020\022\022\024\n\020CLUSTER_" +
      "DISABLED\020\024\022\032\n\026WRONG_PARTITION_NUMBER\020\025\022\022" +
      "\n\016CREATE_TIMEOUT\020\026\022\020\n\014IDLE_TIMEOUT\020\027\022\t\n\005" +
      "ERROR\020dB\031\n\027ru.yandex.ydb.persqueueb\006prot" +
      "o3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
